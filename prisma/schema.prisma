datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma/client"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  stravaAccount StravaAccount?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model StravaAccount {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  stravaId               String   @unique
  username               String?
  resourceState          Int?
  firstname              String?
  lastname               String?
  bio                    String?
  city                   String?
  state                  String?
  country                String?
  sex                    String?
  premium                Boolean?
  summit                 Boolean?
  createdAtStrava        DateTime? // Strava's created_at
  updatedAtStrava        DateTime? // Strava's updated_at
  badgeTypeId            Int?
  weight                 Int?
  profile                String?
  profileMedium          String?
  friend                 Int?      // nullable, can be null
  follower               Int?      // nullable, can be null
  blocked                Boolean?
  canFollow              Boolean?
  followerCount          Int?
  friendCount            Int?
  mutualFriendCount      Int?
  athleteType            Int?
  datePreference         String?
  measurementPreference  String?
  postableClubsCount     Int?
  isWinbackViaUpload     Boolean?
  isWinbackViaView       Boolean?
  clubs                  Json?     // Store as JSON, or normalize if you want
  shoes                  Json?     // Store as JSON, or normalize if you want

  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}